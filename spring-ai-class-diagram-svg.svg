<svg viewBox="0 0 1400 900" xmlns="http://www.w3.org/2000/svg">
  <!-- 스타일 정의 -->
  <defs>
    <style>
      .class-box { fill: white; stroke: #333; stroke-width: 2; }
      .main-class { fill: #fff3cd; stroke: #856404; stroke-width: 2; }
      .service-class { fill: #d4edda; stroke: #155724; stroke-width: 2; }
      .api-class { fill: #d1ecf1; stroke: #0c5460; stroke-width: 2; }
      .model-class { fill: #f8d7da; stroke: #721c24; stroke-width: 2; }
      .message-class { fill: #e2e3e5; stroke: #383d41; stroke-width: 2; }
      .interface-class { fill: #fff5ee; stroke: #333; stroke-width: 2; stroke-dasharray: 5,5; }
      .response-class { fill: #e7e7ff; stroke: #4b0082; stroke-width: 2; }
      .class-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; text-anchor: middle; }
      .class-stereotype { font-family: Arial, sans-serif; font-size: 11px; font-style: italic; text-anchor: middle; fill: #666; }
      .class-content { font-family: Arial, sans-serif; font-size: 11px; }
      .field { fill: #333; }
      .method { fill: #000; }
      .divider { stroke: #333; stroke-width: 1; }
      .arrow { stroke: #333; stroke-width: 1.5; fill: none; }
      .dashed-arrow { stroke: #333; stroke-width: 1.5; fill: none; stroke-dasharray: 5,5; }
      .composition { stroke: #333; stroke-width: 1.5; fill: #333; }
      .implements { stroke: #333; stroke-width: 1.5; fill: none; stroke-dasharray: 5,5; }
      .label { font-family: Arial, sans-serif; font-size: 10px; fill: #666; }
    </style>
    <!-- 화살표 마커 정의 -->
    <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
      <path d="M0,0 L0,6 L9,3 z" fill="#333"/>
    </marker>
    <marker id="diamond" markerWidth="10" markerHeight="10" refX="0" refY="5" orient="auto">
      <path d="M0,5 L5,0 L10,5 L5,10 z" fill="#333"/>
    </marker>
    <marker id="triangle" markerWidth="10" markerHeight="10" refX="10" refY="5" orient="auto">
      <path d="M0,0 L10,5 L0,10 z" fill="white" stroke="#333"/>
    </marker>
  </defs>

  <!-- Springai2Application 클래스 -->
  <rect x="600" y="20" width="200" height="80" class="main-class" rx="5"/>
  <text x="700" y="40" class="class-stereotype">«Main Class»</text>
  <text x="700" y="60" class="class-title">Springai2Application</text>
  <line x1="600" y1="70" x2="800" y2="70" class="divider"/>
  <text x="610" y="90" class="method">+main(args: String[]): void</text>

  <!-- ChatService 클래스 -->
  <rect x="550" y="180" width="300" height="180" class="service-class" rx="5"/>
  <text x="700" y="200" class="class-stereotype">«Service»</text>
  <text x="700" y="220" class="class-title">ChatService</text>
  <line x1="550" y1="230" x2="850" y2="230" class="divider"/>
  <text x="560" y="250" class="field">-openAiApi: OpenAiApi</text>
  <text x="560" y="265" class="field">-anthropicApi: AnthropicApi</text>
  <text x="560" y="280" class="field">-geminiApi: OpenAiApi</text>
  <line x1="550" y1="290" x2="850" y2="290" class="divider"/>
  <text x="560" y="310" class="method">+ChatService(OpenAiApi, AnthropicApi, OpenAiApi)</text>
  <text x="560" y="325" class="method">+getOpenAiResponse(String, double): ChatResponse</text>
  <text x="560" y="340" class="method">+getAnthropicResponse(String, double): ChatResponse</text>
  <text x="560" y="355" class="method">+getGeminiResponse(String, double): ChatResponse</text>

  <!-- OpenAiApi 클래스 -->
  <rect x="50" y="200" width="200" height="140" class="api-class" rx="5"/>
  <text x="150" y="220" class="class-stereotype">«API»</text>
  <text x="150" y="240" class="class-title">OpenAiApi</text>
  <line x1="50" y1="250" x2="250" y2="250" class="divider"/>
  <text x="60" y="270" class="field">-apiKey: String</text>
  <text x="60" y="285" class="field">-baseUrl: String</text>
  <text x="60" y="300" class="field">-completionsPath: String</text>
  <line x1="50" y1="310" x2="250" y2="310" class="divider"/>
  <text x="60" y="330" class="method">+builder(): Builder</text>

  <!-- AnthropicApi 클래스 -->
  <rect x="280" y="200" width="200" height="110" class="api-class" rx="5"/>
  <text x="380" y="220" class="class-stereotype">«API»</text>
  <text x="380" y="240" class="class-title">AnthropicApi</text>
  <line x1="280" y1="250" x2="480" y2="250" class="divider"/>
  <text x="290" y="270" class="field">-apiKey: String</text>
  <line x1="280" y1="280" x2="480" y2="280" class="divider"/>
  <text x="290" y="300" class="method">+builder(): Builder</text>

  <!-- Message 인터페이스 -->
  <rect x="920" y="200" width="180" height="80" class="interface-class" rx="5"/>
  <text x="1010" y="220" class="class-stereotype">«interface»</text>
  <text x="1010" y="240" class="class-title">Message</text>
  <line x1="920" y1="250" x2="1100" y2="250" class="divider"/>
  <text x="930" y="270" class="method">+getContent(): String</text>

  <!-- SystemMessage 클래스 -->
  <rect x="850" y="330" width="150" height="100" class="message-class" rx="5"/>
  <text x="925" y="350" class="class-title">SystemMessage</text>
  <line x1="850" y1="360" x2="1000" y2="360" class="divider"/>
  <text x="860" y="380" class="field">-content: String</text>
  <line x1="850" y1="390" x2="1000" y2="390" class="divider"/>
  <text x="860" y="410" class="method">+SystemMessage(String)</text>

  <!-- UserMessage 클래스 -->
  <rect x="1020" y="330" width="150" height="100" class="message-class" rx="5"/>
  <text x="1095" y="350" class="class-title">UserMessage</text>
  <line x1="1020" y1="360" x2="1170" y2="360" class="divider"/>
  <text x="1030" y="380" class="field">-content: String</text>
  <line x1="1020" y1="390" x2="1170" y2="390" class="divider"/>
  <text x="1030" y="410" class="method">+UserMessage(String)</text>

  <!-- ChatOptions 클래스 -->
  <rect x="1200" y="200" width="180" height="120" class="class-box" rx="5"/>
  <text x="1290" y="220" class="class-title">ChatOptions</text>
  <line x1="1200" y1="230" x2="1380" y2="230" class="divider"/>
  <text x="1210" y="250" class="field">-model: String</text>
  <text x="1210" y="265" class="field">-temperature: double</text>
  <line x1="1200" y1="275" x2="1380" y2="275" class="divider"/>
  <text x="1210" y="295" class="method">+builder(): Builder</text>
  <text x="1210" y="310" class="method">+build(): ChatOptions</text>

  <!-- Prompt 클래스 -->
  <rect x="1050" y="480" width="250" height="120" class="class-box" rx="5"/>
  <text x="1175" y="500" class="class-title">Prompt</text>
  <line x1="1050" y1="510" x2="1300" y2="510" class="divider"/>
  <text x="1060" y="530" class="field">-messages: List&lt;Message&gt;</text>
  <text x="1060" y="545" class="field">-chatOptions: ChatOptions</text>
  <line x1="1050" y1="555" x2="1300" y2="555" class="divider"/>
  <text x="1060" y="575" class="method">+Prompt(List&lt;Message&gt;, ChatOptions)</text>
  <text x="1060" y="590" class="method">+getMessages(): List&lt;Message&gt;</text>

  <!-- OpenAiChatModel 클래스 -->
  <rect x="150" y="480" width="200" height="120" class="model-class" rx="5"/>
  <text x="250" y="500" class="class-title">OpenAiChatModel</text>
  <line x1="150" y1="510" x2="350" y2="510" class="divider"/>
  <text x="160" y="530" class="field">-openAiApi: OpenAiApi</text>
  <line x1="150" y1="540" x2="350" y2="540" class="divider"/>
  <text x="160" y="560" class="method">+builder(): Builder</text>
  <text x="160" y="575" class="method">+call(Prompt): ChatResponse</text>

  <!-- AnthropicChatModel 클래스 -->
  <rect x="380" y="480" width="220" height="120" class="model-class" rx="5"/>
  <text x="490" y="500" class="class-title">AnthropicChatModel</text>
  <line x1="380" y1="510" x2="600" y2="510" class="divider"/>
  <text x="390" y="530" class="field">-anthropicApi: AnthropicApi</text>
  <line x1="380" y1="540" x2="600" y2="540" class="divider"/>
  <text x="390" y="560" class="method">+builder(): Builder</text>
  <text x="390" y="575" class="method">+call(Prompt): ChatResponse</text>

  <!-- ChatResponse 클래스 -->
  <rect x="650" y="480" width="180" height="100" class="response-class" rx="5"/>
  <text x="740" y="500" class="class-title">ChatResponse</text>
  <line x1="650" y1="510" x2="830" y2="510" class="divider"/>
  <text x="660" y="530" class="field">-result: Result</text>
  <line x1="650" y1="540" x2="830" y2="540" class="divider"/>
  <text x="660" y="560" class="method">+getResult(): Result</text>
  <text x="660" y="575" class="method">+toString(): String</text>

  <!-- 관계선들 -->
  <!-- Main to ChatService -->
  <path d="M700,100 L700,180" class="dashed-arrow" marker-end="url(#arrow)"/>
  <text x="710" y="140" class="label">«creates»</text>

  <!-- ChatService to APIs (composition) -->
  <path d="M550,270 L250,270" class="arrow" marker-start="url(#diamond)"/>
  <text x="350" y="265" class="label">has</text>
  
  <path d="M550,270 L480,270" class="arrow" marker-start="url(#diamond)"/>

  <!-- ChatService to Models -->
  <path d="M600,360 L250,480" class="dashed-arrow" marker-end="url(#arrow)"/>
  <text x="380" y="420" class="label">«creates»</text>
  
  <path d="M650,360 L490,480" class="dashed-arrow" marker-end="url(#arrow)"/>
  <text x="540" y="420" class="label">«creates»</text>

  <!-- ChatService to Prompt -->
  <path d="M850,340 L1050,500" class="dashed-arrow" marker-end="url(#arrow)"/>
  <text x="920" y="420" class="label">«creates»</text>

  <!-- Message implementations -->
  <path d="M925,330 L990,280" class="implements" marker-end="url(#triangle)"/>
  <path d="M1095,330 L1030,280" class="implements" marker-end="url(#triangle)"/>

  <!-- Models to APIs -->
  <path d="M250,480 L150,340" class="arrow" marker-end="url(#arrow)"/>
  <text x="180" y="410" class="label">uses</text>
  
  <path d="M490,480 L380,310" class="arrow" marker-end="url(#arrow)"/>
  <text x="420" y="395" class="label">uses</text>

  <!-- Models to ChatResponse -->
  <path d="M350,540 L650,540" class="dashed-arrow" marker-end="url(#arrow)"/>
  <text x="480" y="535" class="label">«returns»</text>
  
  <path d="M600,540 L650,540" class="dashed-arrow" marker-end="url(#arrow)"/>

  <!-- Prompt to Message and ChatOptions -->
  <path d="M1100,480 L1010,280" class="arrow" marker-end="url(#arrow)"/>
  <text x="1040" y="380" class="label">contains</text>
  
  <path d="M1200,480 L1290,320" class="arrow" marker-end="url(#arrow)"/>
  <text x="1230" y="400" class="label">contains</text>

  <!-- 범례 -->
  <g transform="translate(50, 700)">
    <text x="0" y="0" style="font-family: Arial; font-size: 14px; font-weight: bold;">범례:</text>
    <rect x="0" y="10" width="30" height="15" class="main-class"/>
    <text x="35" y="22" style="font-family: Arial; font-size: 12px;">Main Class</text>
    
    <rect x="120" y="10" width="30" height="15" class="service-class"/>
    <text x="155" y="22" style="font-family: Arial; font-size: 12px;">Service</text>
    
    <rect x="220" y="10" width="30" height="15" class="api-class"/>
    <text x="255" y="22" style="font-family: Arial; font-size: 12px;">API</text>
    
    <rect x="300" y="10" width="30" height="15" class="model-class"/>
    <text x="335" y="22" style="font-family: Arial; font-size: 12px;">Model</text>
    
    <rect x="400" y="10" width="30" height="15" class="response-class"/>
    <text x="435" y="22" style="font-family: Arial; font-size: 12px;">Response</text>
    
    <line x1="0" y1="40" x2="30" y2="40" class="dashed-arrow" marker-end="url(#arrow)"/>
    <text x="35" y="44" style="font-family: Arial; font-size: 12px;">creates/returns</text>
    
    <line x1="150" y1="40" x2="180" y2="40" class="arrow" marker-end="url(#arrow)"/>
    <text x="185" y="44" style="font-family: Arial; font-size: 12px;">uses</text>
    
    <line x1="280" y1="40" x2="310" y2="40" class="arrow" marker-start="url(#diamond)"/>
    <text x="315" y="44" style="font-family: Arial; font-size: 12px;">composition</text>
    
    <line x1="420" y1="40" x2="450" y2="40" class="implements" marker-end="url(#triangle)"/>
    <text x="455" y="44" style="font-family: Arial; font-size: 12px;">implements</text>
  </g>

  <!-- 제목 -->
  <text x="700" y="850" style="font-family: Arial; font-size: 20px; font-weight: bold; text-anchor: middle;">Spring AI Multi-Model Application - Class Diagram</text>
  <text x="700" y="870" style="font-family: Arial; font-size: 14px; text-anchor: middle; fill: #666;">OpenAI, Anthropic Claude, Google Gemini 통합 구조</text>
</svg>